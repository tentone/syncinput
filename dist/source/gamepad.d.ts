import { Button } from './button';
import { InputHandler } from './input-handler';
import { GamepadHapticEffectType } from './gamepad-haptic-effect';
export type GamepadEffectParameters = {
    duration?: number;
    startDelay?: number;
    strongMagnitude?: number;
    weakMagnitude?: number;
    leftTrigger?: number;
    rightTrigger?: number;
};
export declare class Gamepad extends InputHandler {
    id: string;
    mapping: GamepadMappingType;
    connected: boolean;
    index: number;
    deadzone: number;
    vibrationActuator: GamepadHapticActuator;
    buttons: Button[];
    axes: number[];
    gamepad: any;
    private event;
    constructor();
    initialize(): void;
    resetHaptic(): void;
    startHapticEffect(type: GamepadHapticEffectType, params: GamepadEffectParameters): void;
    getGamepads(): any[];
    setGamepad(gamepad: any): any;
    disconnect(): void;
    dispose(): void;
    setProductVendor(gamepad: any): void;
    update(): void;
    applyDeadzone(value: number): number;
    getAnalogueButton(buttonIndex: number): number;
    getAxis(axisIndex: number): number;
    buttonExists(button: number): boolean;
    buttonPressed(button: number): boolean;
    buttonJustPressed(button: number): boolean;
    buttonJustReleased(button: number): boolean;
}
